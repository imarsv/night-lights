/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  ** This notice applies to any and all portions of this file
  * that are not between comment pairs USER CODE BEGIN and
  * USER CODE END. Other portions of this file, whether 
  * inserted by the user or by software development tools
  * are owned by their respective copyright owners.
  *
  * COPYRIGHT(c) 2018 STMicroelectronics
  *
  * Redistribution and use in source and binary forms, with or without modification,
  * are permitted provided that the following conditions are met:
  *   1. Redistributions of source code must retain the above copyright notice,
  *      this list of conditions and the following disclaimer.
  *   2. Redistributions in binary form must reproduce the above copyright notice,
  *      this list of conditions and the following disclaimer in the documentation
  *      and/or other materials provided with the distribution.
  *   3. Neither the name of STMicroelectronics nor the names of its contributors
  *      may be used to endorse or promote products derived from this software
  *      without specific prior written permission.
  *
  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  *
  ******************************************************************************
  */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "stm32f1xx_hal.h"
#include "spi.h"
#include "usart.h"
#include "gpio.h"

/* USER CODE BEGIN Includes */
#include "WS2812B/ws2812b.h"
/* USER CODE END Includes */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
/* Private variables ---------------------------------------------------------*/

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);

/* USER CODE BEGIN PFP */
/* Private function prototypes -----------------------------------------------*/
void clear(uint8_t *data);
void set(uint8_t *data, int index, RGB_t color);
uint32_t bswap_32(uint32_t x);
/* USER CODE END PFP */

/* USER CODE BEGIN 0 */

#define LED_COUNT (60)
#define LED_DATA_SIZE (LED_COUNT * 9)

RGB_t leds[LED_COUNT];
uint8_t data[LED_DATA_SIZE + 4];
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  *
  * @retval None
  */
int main(void)
{
  /* USER CODE BEGIN 1 */
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART2_UART_Init();
  MX_SPI1_Init();
  /* USER CODE BEGIN 2 */
  ws2812b_Init();

  int iteration = 0;

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

//	  printf("Iteration > %d \n", iteration);
	  HAL_Delay(10);

	  if (iteration >= LED_COUNT) {
		  iteration = 0;
	  }

		for (int color = 0; color < 3; color++) {

//			for (int i = 0; i < LED_COUNT; i++) {
//				leds[i].r = 0;
//				leds[i].g = 0;
//				leds[i].b = 0;
//			}

//			memset(leds, 0, sizeof(RGB_t) * LED_COUNT);

			for (int led_index = 0; led_index < LED_COUNT; led_index++) {
//				switch (color) {
//				case 0:
//					leds[led_index].r = (UINT8_MAX / LED_COUNT) * led_index;
//					break;
//				case 1:
//					leds[led_index].g = (UINT8_MAX / LED_COUNT) * led_index;
//					break;
//				case 2:
//					leds[led_index].b = (UINT8_MAX / LED_COUNT) * led_index;
//					break;
//				}

				switch (color) {
				case 0:
					leds[led_index].r = (UINT8_MAX / LED_COUNT) * led_index;
					leds[led_index].g = 0;
					leds[led_index].b = 0;
					break;
				case 1:
					leds[led_index].r = 0;
					leds[led_index].g = (UINT8_MAX / LED_COUNT) * led_index;
					leds[led_index].b = 0;
					break;
				case 2:
					leds[led_index].r = 0;
					leds[led_index].g = 0;
					leds[led_index].b = (UINT8_MAX / LED_COUNT) * led_index;
					break;
				}

				HAL_Delay(7);

//				clear(data);
				for (int i = 0; i < LED_COUNT; i++) {
					set(data, i, leds[i]);
				}

//				if (HAL_SPI_Transmit(&hspi1, data, LED_DATA_SIZE, 1000)
//						!= HAL_OK) {
//					printf("SPI failed! \n");
//				}

				if (HAL_SPI_Transmit_DMA(&hspi1, data, LED_DATA_SIZE) != HAL_OK) {
					printf("SPI failed! \n");
				}
			}
		}

  /* USER CODE END WHILE */

  /* USER CODE BEGIN 3 */
	  iteration++;
  }
  /* USER CODE END 3 */

}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
}

/* USER CODE BEGIN 4 */
void clear(uint8_t *data) {
  for (int i = 0; i < LED_DATA_SIZE; i += 3) {
	  *((uint32_t*) (data + i)) = 0x244992;
  }
}
void set(uint8_t *data, int index, RGB_t color) {
	uint32_t R = ((0x00000004 | (((color.r >> 0) & 0x1) << 1)) << (3 * 0 + 8))
			| ((0x00000004 | (((color.r >> 1) & 0x1) << 1)) << (3 * 1 + 8))
			| ((0x00000004 | (((color.r >> 2) & 0x1) << 1)) << (3 * 2 + 8))
			| ((0x00000004 | (((color.r >> 3) & 0x1) << 1)) << (3 * 3 + 8))
			| ((0x00000004 | (((color.r >> 4) & 0x1) << 1)) << (3 * 4 + 8))
			| ((0x00000004 | (((color.r >> 5) & 0x1) << 1)) << (3 * 5 + 8))
			| ((0x00000004 | (((color.r >> 6) & 0x1) << 1)) << (3 * 6 + 8))
			| ((0x00000004 | (((color.r >> 7) & 0x1) << 1)) << (3 * 7 + 8));

	uint32_t G = ((0x00000004 | (((color.g >> 0) & 0x1) << 1)) << (3 * 0 + 8))
			| ((0x00000004 | (((color.g >> 1) & 0x1) << 1)) << (3 * 1 + 8))
			| ((0x00000004 | (((color.g >> 2) & 0x1) << 1)) << (3 * 2 + 8))
			| ((0x00000004 | (((color.g >> 3) & 0x1) << 1)) << (3 * 3 + 8))
			| ((0x00000004 | (((color.g >> 4) & 0x1) << 1)) << (3 * 4 + 8))
			| ((0x00000004 | (((color.g >> 5) & 0x1) << 1)) << (3 * 5 + 8))
			| ((0x00000004 | (((color.g >> 6) & 0x1) << 1)) << (3 * 6 + 8))
			| ((0x00000004 | (((color.g >> 7) & 0x1) << 1)) << (3 * 7 + 8));

	uint32_t B = ((0x00000004 | (((color.b >> 0) & 0x1) << 1)) << (3 * 0 + 8))
			| ((0x00000004 | (((color.b >> 1) & 0x1) << 1)) << (3 * 1 + 8))
			| ((0x00000004 | (((color.b >> 2) & 0x1) << 1)) << (3 * 2 + 8))
			| ((0x00000004 | (((color.b >> 3) & 0x1) << 1)) << (3 * 3 + 8))
			| ((0x00000004 | (((color.b >> 4) & 0x1) << 1)) << (3 * 4 + 8))
			| ((0x00000004 | (((color.b >> 5) & 0x1) << 1)) << (3 * 5 + 8))
			| ((0x00000004 | (((color.b >> 6) & 0x1) << 1)) << (3 * 6 + 8))
			| ((0x00000004 | (((color.b >> 7) & 0x1) << 1)) << (3 * 7 + 8));

//	*((uint32_t*) (data + index * 9 + 3 * 0)) |= bswap_32(G);
//	*((uint32_t*) (data + index * 9 + 3 * 1)) |= bswap_32(R);
//	*((uint32_t*) (data + index * 9 + 3 * 2)) |= bswap_32(B);

	*((uint32_t*) (data + index * 9 + 3 * 0)) = bswap_32(G);
	*((uint32_t*) (data + index * 9 + 3 * 1)) = bswap_32(R);
	*((uint32_t*) (data + index * 9 + 3 * 2)) = bswap_32(B);
}

uint32_t bswap_32(uint32_t x) {
	uint32_t t = x;
	uint32_t s;
	s = ((((uint32_t) (t) & (uint32_t) 0x000000ffUL) << 24)
			| (((uint32_t) (t) & (uint32_t) 0x0000ff00UL) << 8)
			| (((uint32_t) (t) & (uint32_t) 0x00ff0000UL) >> 8)
			| (((uint32_t) (t) & (uint32_t) 0xff000000UL) >> 24));
	return s;
}

void __io_putchar(uint8_t ch) {
	/**
	 * \brief		__io_putchar - A routine to transmit a single character out the serial port
	 * \return		void
	 * \param[in]	ch - uint8_t the character to transmit
	 * \author		andreichichak
	 * \date		Oct 16, 2015
	 * \details		This routine assumes that we will be using UART2. A timeout value of 1ms (4th parameter)
	 * 				gives a retry if the transmit buffer is full when back to back characters are transmitted,
	 * 				avoiding dropping characters.
	 */

	HAL_UART_Transmit(&huart2, &ch, 1, 1);
}
/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t* file, uint32_t line)
{ 
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

/**
  * @}
  */

/**
  * @}
  */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
